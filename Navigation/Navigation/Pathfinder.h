/* Pathfinder Header File */

#ifndef PATHFINDER_H
#define PATHFINDER_H
#include "Autosearch.h"
#include "Node.h"

#include <math.h>
#include <iostream>

typedef pair<double, double> point;
typedef  pair<point, point> line;
typedef  array<line> perimeters;


class Pathfinder {
public:
	/** constructor */
	Pathfinder(){}

	/** build_path
		Inputs: The width and height of the field in meters, and the map
				generated by AutoSearch
		Outputs: An array of GPS coordinates that the plane should go to 
		*/
	array<int> buildPath (double width_meters, 
						   double height_meters, 
						   Autosearch^ autosearch);

	array<int> build_array(double width_meters, 
						   double height_meters){


	const int NOT_SEEN = 1;
	const int SEEN = 2
	const int OUT_OF_BOUNDS = 0
	const int PADDING = 5
	const int PATH_WIDTH = 60 // Path width in meters
	const int OFFSET = PATH_WIDTH / 2// Offset of even rows
	const int FIELD_BORDER = 20 // In meters, the closest the plane should ever get the edge of the field
 
private:

	//An array of GPS coordinates that the plane should go to 
	array<Node^ > path;
	//array that correspond to the field;
	array<double> result;
	Autosearch* autoSearch;

	int width_meters;
	int height_meters;
	int array_height;
	int array_width;
	array<array<int> > triangle_array;
	array<Node^ > adj_list;
		

	const int PADDING = 5;
	// Path width in meters
	const int PATH_WIDTH = 61; 
	// Offset of even rows
	const int OFFSET = PATH_WIDTH / 2; 
	// In meters, the closest the plane 
	//should ever get to the edge of the field
	const int FIELD_BORDER = 20; 

	/*helper method*/
	int convertToInt(double x);

	/** arrayToMeters
		Inputs: The index of an element in triangle_array
		Outputs: The meter coordinate of the center of the index 
		*/
	pair<double, double> arrayToMeters (double i, double j);

	/** isInField
		Inputs: An array coordinate for the autosearch array
		Outputs: If a field segment within path_width / 2 return true.
				 Otherwise returns false
				*/
	bool is_in_field(double x, double y);


	/** create_image
		Inputs: The path that the plane will travel.
		Outputs: An image that corresponds to the path,
		 		that can be overlayed over the autoSearch image. 
	*/
	Bitmap create_image(path, array<double> path, filename);


};

/** When printing a countint to an ostream, print its int value */
std::ostream& operator<<(std::ostream& stm, const Pathfinder& pathfinder);



#endif